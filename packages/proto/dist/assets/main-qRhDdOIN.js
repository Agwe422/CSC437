import"./darkmode-Du2TWbuW.js";const u=function(){const e="0d5b4043cc934147973074e15d1f2b0c",n="33d4b6a5c112493290b38c127329251c";return{getToken:async()=>(await(await fetch("https://accounts.spotify.com/api/token",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded",Authorization:"Basic "+btoa(e+":"+n)},body:"grant_type=client_credentials"})).json()).access_token,getGenres:async c=>(await(await fetch("https://api.spotify.com/v1/browse/categories?locale=sv_US",{method:"GET",headers:{Authorization:"Bearer "+c}})).json()).categories.items,getPlaylistByGenre:async(c,o=10)=>{const l=await fetch(`/api/category/${c}/playlists?limit=${o}`);if(!l.ok)throw new Error(`Server said ${l.status}`);return(await l.json()).playlists.items},getTracks:async(c,o=10)=>{const l=await fetch(`/api/playlist-tracks?href=${encodeURIComponent(c)}&limit=${o}`);if(!l.ok)throw new Error(`Server said ${l.status}`);return(await l.json()).items},getTrack:async c=>{const o=await fetch(`/api/track?href=${encodeURIComponent(c)}`);if(!o.ok)throw new Error(`Server said ${o.status}`);return await o.json()}}}(),y=function(){const e={selectGenre:"#select_genre",selectPlaylist:"#select_playlist",buttonSearch:"#btn_search",divSongDetail:"#song-detail",hiddenToken:"#hidden_token",divSongList:".song-list"};return{inputFields(){return{genre:document.querySelector(e.selectGenre),playlist:document.querySelector(e.selectPlaylist),tracks:document.querySelector(e.divSongList),searchButton:document.querySelector(e.buttonSearch),songDetail:document.querySelector(e.divSongDetail)}},createGenre(n,t){const a=document.querySelector(e.selectGenre);a&&a.insertAdjacentHTML("beforeend",`<option value="${t}">${n}</option>`)},createPlaylist(n,t){const a=document.querySelector(e.selectPlaylist);a&&a.insertAdjacentHTML("beforeend",`<option value="${t}">${n}</option>`)},createTrack(n,t){const a=document.querySelector(e.divSongList);a&&a.insertAdjacentHTML("beforeend",`<a href="#" class="list-group-item list-group-item-action list-group-item-light" id="${n}">${t}</a>`)},createTrackDetail(n,t,a){const s=document.querySelector(e.divSongDetail);if(!s)return;s.innerHTML="";const i=`
        <div class="row col-sm-12 px-0">
          <img src="${n}" alt="" style="max-width:100%; height:auto;" />
        </div>
        <div class="row col-sm-12 px-0">
          <label class="form-label col-sm-12">${t}</label>
        </div>
        <div class="row col-sm-12 px-0">
          <label class="form-label col-sm-12">By ${a}</label>
        </div>
      `;s.insertAdjacentHTML("beforeend",i)},resetPlaylist(){this.inputFields().playlist.innerHTML='<option value="">-- Select a playlist --</option>',this.resetTracks()},resetTracks(){this.inputFields().tracks.innerHTML="",this.resetTrackDetail()},resetTrackDetail(){this.inputFields().songDetail.innerHTML=""},storeToken(n){const t=document.querySelector(e.hiddenToken);t&&(t.value=n)},getStoredToken(){const n=document.querySelector(e.hiddenToken);return(n==null?void 0:n.value)??""}}}(),p=function(e,n){const t=e.inputFields(),a=async()=>{const s=await n.getToken();e.storeToken(s),(await n.getGenres(s)).forEach(r=>e.createGenre(r.name,r.id))};return t.genre&&t.genre.addEventListener("change",async()=>{e.resetPlaylist();const s=t.genre.value;if(!s)return;(await n.getPlaylistByGenre(s,10)).forEach(r=>{e.createPlaylist(r.name,r.tracks.href)})}),t.searchButton&&t.searchButton.addEventListener("click",async s=>{s.preventDefault(),e.resetTracks();const i=t.playlist.value;if(!i)return;(await n.getTracks(i)).forEach(c=>{const o=c.track;e.createTrack(o.href,o.name)})}),t.tracks&&t.tracks.addEventListener("click",async s=>{s.preventDefault(),e.resetTrackDetail();const i=s.target.id;if(!i)return;const r=await n.getTrack(i),c=r.album.images[r.album.images.length-1].url,o=r.name,l=r.artists[0].name;e.createTrackDetail(c,o,l)}),{init(){console.log("APPController.init() running"),a()}}}(y,u);window.addEventListener("DOMContentLoaded",()=>{p.init()});async function g(){const e=document.getElementById("playlist-prompt"),n=document.getElementById("playlist-list");try{const t=await fetch("/api/playlists");if(t.status===401){e.innerHTML='<p>Please <a href="/auth/login">log in with Spotify</a> to see your playlists.</p>';return}if(!t.ok){e.textContent="Could not load playlists.";return}const a=await t.json();if(!Array.isArray(a)||a.length===0){e.textContent="No playlists found on your account.";return}e.style.display="none",n.style.display="block",n.innerHTML=a.map(s=>{var i,r;return`
              <li>
                ${(r=(i=s.images)==null?void 0:i[0])!=null&&r.url?`<img src="${s.images[0].url}" alt="">`:""}
                <span>${s.name}</span>
              </li>
            `}).join("")}catch(t){console.error(t),e.textContent="Unexpected error loading playlists."}}g();
